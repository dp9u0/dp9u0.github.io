<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[关于crontab执行脚本环境变量问题]]></title>
      <url>%2F2017%2F02%2F24%2Fabout-crontab%2F</url>
      <content type="text"><![CDATA[搭建自己的博客配置了自动化脚本，用来同步git仓库、执行hexo命令生成&amp;部署站点。脚本内容如下 123456789101112131415161718192021222324252627282930313233343536373839404142#!/bin/bashDEFAULT_DIR=$HOME/HexoBlogecho &quot;========================================&quot; echo $(date +%y_%m_%d_%H_%I_%T) echo &quot;----------------------------------------&quot; echo &quot;HOME : $HOME&quot;echo &quot;PATH : $PATH&quot;echo &quot;NODE_HOME : $NODE_HOME&quot;echo `whereis hexo`echo &quot;----------------------------------------&quot; if [ $1 ] ; then echo &quot;first argument is not empty : $1&quot; TAR_DIR=$1 echo &quot;use first argument as target dir : $TAR_DIR&quot; else echo &quot;first argument is empty&quot; # use $DEFAULT_DIR as the target dir TAR_DIR=$DEFAULT_DIR echo &quot;use default dir as target dir : $TAR_DIR&quot; fi echo &quot;----------------------------------------&quot; if [ -d $TAR_DIR ] ; then echo &quot;$TAR_DIR is a dir,try update&quot; cd $TAR_DIR echo &quot;++++++++++++++begin git pull++++++++++++&quot; git pull echo &quot;++++++++++++++begin hexo clean+++++++++&quot; hexo clean echo &quot;++++++++++++++begin hexo generate+++++++&quot; hexo g echo &quot;++++++++++++++begin hexo deploy+++++++++&quot; hexo d echo &quot;++++++++++++++begin killall hexo++++++++&quot; killall hexo echo &quot;++++++++++++++begin hexo server+++++++++&quot; hexo server &amp; else echo &quot;$TAR_DIR is not a dir,do nothing&quot; fiecho &quot;----------------------------------------&quot; echo $(date +%y_%m_%d_%H_%I_%T) echo &quot;========================================&quot; 脚本中使用了nodejs中的hexo，在登录状态下，运行命令行是正常的。 这是由于在 /etc/profile 中配置了环境变量 ，添加了 NODE_HOME 、NODE_PATH 并将 NODE_HOME/bin 添加到 PATH。这样，安装的 nodejs 包（默认安装的NODE_HOME/lib/node_modules，使用npm安装同时会创建软链接到 NODE_HOME/bin）都可以直接访问到。 1234#set nodejs env export NODE_HOME=/usr/local/node export PATH=$NODE_HOME/bin:$PATH export NODE_PATH=$NODE_HOME/lib/node_modules:$PATH 但是问题在于，crontab 执行脚本时。没有用户登录（用户登录会执行 /etc/profile 和 ~/.profile）以及打开终端（打开终端会执行 /etc/bashrc 和 ~/.bashrc）的动作，需要的诸如 NODE_HOME 、NODE_PATH 等（通过/etc/profile 导入）就找不到了，PATH中也没有node的路径。 因此，这种情况下，配置 crontab 如下: 110 * * * * $HOME/CallAutoUpdate.sh # 每十分钟执行一次 其中CallAutoUpdate.sh为： 12345678#!/bin/bash# this srcipt call by cron # will not exoprt some env var in profile or .profile# so ...rm -fr ~/update.log. /etc/profile. ~/.profile. ~/HexoBlog/AutoUpdate.sh &gt;&gt; ~/update.log 这样就解决了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo搭建个人博客]]></title>
      <url>%2F2017%2F02%2F22%2Ffirst-blog%2F</url>
      <content type="text"><![CDATA[正在学习前端知识，发现了一个很好玩的基于 Node.js的高效的静态站点生成框架Hexo,使用 Markdown 编写文章,于是用来搭建自己的blog。第一篇就用来介绍如何一步一步完成搭建的。 目录 准备 构建 创建 配置 主题 插件 写作 生成 运行 部署 准备需要在电脑中安装以下： node.js node 安装后 自带 npm 包管理器。安装方式请参考官网。 git git 用于创建hexo项目、更换主题、管理创建的hexo项目源码以及部署到github.io使用。安装方式请参考官网。 hexo-cli 用于创建、管理、发布hexo项目。使用npm包管理器安装：1npm install -g hexo-cli 构建安装完 node 、git 以及hexo-cli 后，就可以开始构建hexo blog了。 创建在源码目录下，命令行运行 1hexo init youbsitename 就可以创建名为 youbsitename 的站点目录了。此过程会clone一些项目到本地站点目录，过程如下： 1234567891011121314151617181920212223INFO Cloning hexo-starter to D:\Temp\testCloning into &apos;D:\Temp\test&apos;...remote: Counting objects: 53, done.remote: Total 53 (delta 0), reused 0 (delta 0), pack-reused 53Unpacking objects: 100% (53/53), done.Submodule &apos;themes/landscape&apos; (https://github.com/hexojs/hexo-theme-landscape.git) registered for path &apos;themes/landscape&apos;Cloning into &apos;D:/Temp/test/themes/landscape&apos;...remote: Counting objects: 764, done.remote: Compressing objects: 100% (3/3), done.remote: Total 764 (delta 0), reused 0 (delta 0), pack-reused 761Receiving objects: 100% (764/764), 2.53 MiB | 53.00 KiB/s, done.Resolving deltas: 100% (390/390), done.Submodule path &apos;themes/landscape&apos;: checked out &apos;decdc2d9956776cbe95420ae94bac87e22468d38&apos;INFO Install dependenciesnpm WARN deprecated swig@1.4.2: This package is no longer maintainednpm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issuenpm WARN prefer global marked@0.3.6 should be installed with -g&gt; dtrace-provider@0.8.0 install D:\Temp\test\node_modules\dtrace-provider&gt; node scripts/install.js&gt; hexo-util@0.6.0 postinstall D:\Temp\test\node_modules\hexo-util&gt; npm run build:highlight&gt; hexo-util@0.6.0 build:highlight D:\Temp\test\node_modules\hexo-util&gt; node scripts/build_highlight_alias.js &gt; highlight_alias.json 然后，进入blog目录，就可以对blog进行操作了。 1cd yousitename &amp;&amp; dir blog 目录结构如下 123456789yousitename├─package.json 项目package├─_config.yml 站点配置文件├─public 发布文件夹├─scaffolds 模版文件夹├─source 原始文件，通过&quot;hexo g&quot;将本目录下的文件生成为html等到public文件夹├─themes 主题文件夹├─...└─... 配置根目录下的站点配置文件 _config.yml 中的内容是对项目的一些配置，例如 网站信息：作者、名称、描述等 网站结构 发布方式：支持发布到git(需要插件hexo-deployer-git支持) 主题修改站点配置文件 _config.yml 中的内容：1theme: next(你想要的主题，主题需要放在站点目录下的themes目录下) 官网有提供主题列表可以选择，当然你也可以做自己的主题 另外，主题也有自己的主题配置文件 _config.yml，存放主题自己的一些配置。主题配置文件位置在主题目录下。 插件同样，hexo提供了插件功能，可以提供很多生成、发布和运行等的功能。例如可以生成静态网站后，通过插件hexo-deployer-git将生成的内容发布到git.利用这个插件搭配github.io,可以实现自动生成&amp;部署自己的网站。 写作1hexo new [layout] &lt;title&gt; Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。如果不想文章被布局处理，可以将 Front-Matter 中的layout: 设为 false 。 布局 路径 post source/_posts page source draft source/_drafts 更多的写作可以参考官网. 建议创建页面 : tags 和categories 页面,生成的时候可以自动生成分类)和标签页面的内容。 12hexo new page tagshexo new page categories 生成1hexo generate 或者 1hexo g 默认将静态网站生成到 public 目录下，生成完成后就可以将 public 目录下的内容发布到静态网站服务器上。 运行可以使用 hexo server 命令，本地启动服务器，运行网站 1hexo server 默认启动端口为 4000 的服务端，可以使用 http://localhost:4000 访问。 部署代码托管将创建的网站仓库托管到github，注册等过程不表。 配置自己的网站仓库，然后就可以git commit &amp; git push ,将源码推送到github上。这样就可以随时编辑自己的网站了。 不必要的内容不需要提交，可以使用 .gitignore， 贴一下自己的 .gitignore 文件: 1234567891011121314151617181920212223242526272829303132333435363738394041424344# Logslogs*.lognpm-debug.log*# Runtime datapids*.pid*.seed# Directory for instrumented libs generated by jscoverage/JSCoverlib-cov# Coverage directory used by tools like istanbulcoverage# nyc test coverage.nyc_output# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files).grunt# node-waf configuration.lock-wscript# Compiled binary addons (http://nodejs.org/api/addons.html)build/Release# Dependency directoriesnode_modulesjspm_packages# Optional npm cache directory.npm# Optional REPL history.node_repl_history.DS_StoreThumbs.dbdb.json*.logpublic/.deploy*/ 自动部署云服务器在云服务器(ubuntu 16.04)上安装 nodejs 、git 、hexo-cli 然后clone 到仓库本地： 12cd ~ git clone https://github.com/dp9u0/HexoBlog 创建周期执行的呼叫脚本： 1vi CallHexoBlogAutoUpdate.sh CallHexoBlogAutoUpdate.sh脚本中，添加以下内容，呼叫仓库中的自动更新脚本： 12#!/bin/bash. ~/HexoBlog/AutoUpdate.sh 为什么要有两个脚本: CallHexoBlogAutoUpdate.sh 和 AutoUpdate.sh?不知道怎么给 AutoUpdate.sh 添加权限 ，不同的操作系统clone后，权限依旧保留。同时 . ~/HexoBlog/AutoUpdate.sh 如果直接配置在 crontab 环境变量好像有点问题。因此将所以自动更新的逻辑放在 AutoUpdate.sh 并且在每个需要执行自动更新的机器上添加外壳程序 CallHexoBlogAutoUpdate.sh 用点符号执行脚本 AutoUpdate.sh。并且外壳程序添加到定时任务中。 调用的自动更新脚本（该脚本加入到git仓库中，可以自更新）： 1234567891011121314151617181920212223242526272829303132333435363738#!/bin/bashLOG_FILE=~/HexoBlogAutoUpdate.logecho &quot;========================================&quot; &gt;&gt; $LOG_FILEecho $(date +%y_%m_%d_%H_%I_%T) &gt;&gt; $LOG_FILEecho &quot;----------------------------------------&quot; &gt;&gt; $LOG_FILEif [ $1 ] ; then echo &quot;first argument is not empty : $1&quot; &gt;&gt; $LOG_FILE TAR_DIR=$1 echo &quot;use first argument as target dir : $TAR_DIR&quot; &gt;&gt; $LOG_FILEelse echo &quot;first argument is empty&quot; &gt;&gt; $LOG_FILE # use ~/HexoBlog as the default dir TAR_DIR=~/HexoBlog # 修改为你需要的默认路径 echo &quot;use default dir as target dir : $TAR_DIR&quot; &gt;&gt; $LOG_FILEfi echo &quot;----------------------------------------&quot; &gt;&gt; $LOG_FILEif [ -d $TAR_DIR ] ; then echo &quot;$TAR_DIR is a dir,try update&quot; &gt;&gt; $LOG_FILE cd $TAR_DIR echo &quot;++++++++++++++++++++++++++++++++++++++++&quot; &gt;&gt; $LOG_FILE git pull &gt;&gt; $LOG_FILE # 同步git echo &quot;++++++++++++++++++++++++++++++++++++++++&quot; &gt;&gt; $LOG_FILE killall hexo &gt;&gt; $LOG_FILE # 关闭 hexo server echo &quot;++++++++++++++++++++++++++++++++++++++++&quot; &gt;&gt; $LOG_FILE hexo clean &gt;&gt; $LOG_FILE # 清理 echo &quot;++++++++++++++++++++++++++++++++++++++++&quot; &gt;&gt; $LOG_FILE hexo g &gt;&gt; $LOG_FILE # 生成 echo &quot;++++++++++++++++++++++++++++++++++++++++&quot; &gt;&gt; $LOG_FILE hexo server &amp; # 启动 hexo server echo &quot;++++++++++++++++++++++++++++++++++++++++&quot; &gt;&gt; $LOG_FILE hexo d &gt;&gt; $LOG_FILE # 自动 echo &quot;++++++++++++++++++++++++++++++++++++++++&quot; &gt;&gt; $LOG_FILEelse echo &quot;$TAR_DIR is not a dir,do nothing&quot; &gt;&gt; $LOG_FILEfiecho &quot;----------------------------------------&quot; &gt;&gt; $LOG_FILEecho $(date +%y_%m_%d_%H_%I_%T) &gt;&gt; $LOG_FILEecho &quot;========================================&quot; &gt;&gt; $LOG_FILE 添加 CallHexoBlogAutoUpdate 脚本执行权限： 1chmod +x CallHexoBlogAutoUpdate.sh 添加定时任务 1crontab -e 添加如下内容 1*/5 * * * * ~/CallHexoBlogAutoUpdate.sh # 五分钟执行检查一次更新 github.iohexo deploy 命令根据站点配置文件_config.yml中的配置，将生成的内容发布到站点中。 其中不同的type需要特殊的插件支持。例如发布到git上，需要插件hexo-deployer-git 首先创建自己的github.io仓库 关于github.io:如果建立了 用户名.github.io 的仓库，github会定时将这个仓库的静态页面发布到 用户名.github.io 的站点上.可以了解更多关于 github.io的内容 站点配置文件配置参考如下： 1234deploy: type: git repo: git@github.com:dp9u0/dp9u0.github.io.git branch: master 部署到git，需要有你的github仓库的push权限，可以参考github文档中关于生成 SSH Key以及添加SSH Key的部分，配置通过SSH免密码push代码到github。 然后，就可以运行生成部署命令了。 12hexo ghexo d 这些也可以添加到AutoUpdate.sh脚本中，这样我只需要在自己的个人电脑上hexo new ,编辑自己的网站，然后git commit 提交，再执行git push到推送到 将源码推送到github上。这样就可以随时编辑自己的网站了。部署在云服务器上的网站 和github.io 上的内容，都会自动更新了！]]></content>
    </entry>

    
  
  
</search>
