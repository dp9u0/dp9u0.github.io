<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dengpeng Guo</title>
  <subtitle>You&#39;ll Never Walk Alone</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://baochen.name:4000/"/>
  <updated>2017-02-23T06:05:06.704Z</updated>
  <id>http://baochen.name:4000/</id>
  
  <author>
    <name>Dengpeng Guo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo搭建blog</title>
    <link href="http://baochen.name:4000/2017/02/22/first-blog/"/>
    <id>http://baochen.name:4000/2017/02/22/first-blog/</id>
    <published>2017-02-22T14:39:56.000Z</published>
    <updated>2017-02-23T06:05:06.704Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>正在学习前端知识，发现了一个很好玩的基于 Node.js的高效的静态站点生成框架<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a>,使用 Markdown 编写文章,于是用来搭建自己的blog。<br>第一篇就用来介绍如何一步一步完成搭建的。</p>
</blockquote>
<a id="more"></a>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><a href="#准备">准备</a></li>
<li><a href="#构建">构建</a><ul>
<li><a href="#创建">创建</a></li>
<li><a href="#配置">配置</a></li>
<li><a href="#主题">主题</a></li>
<li><a href="#插件">插件</a></li>
<li><a href="#写作">写作</a></li>
<li><a href="#生成">生成</a></li>
<li><a href="#运行">运行</a></li>
<li><a href="#部署">部署</a></li>
</ul>
</li>
</ul>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>需要在电脑中安装以下：</p>
<ul>
<li><a href="https://nodejs.org/en" target="_blank" rel="external">node.js</a></li>
</ul>
<p>node 安装后 自带 npm 包管理器。安装方式请参考官网。</p>
<ul>
<li><a href="https://git-scm.com" target="_blank" rel="external">git</a></li>
</ul>
<p>git 用于创建hexo项目、更换主题、管理创建的hexo项目源码以及部署到github.io使用。安装方式请参考官网。</p>
<ul>
<li><a href="https://hexo.io/" target="_blank" rel="external">hexo-cli</a></li>
</ul>
<p>用于创建、管理、发布hexo项目。使用npm包管理器安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p>安装完 node 、git 以及hexo-cli 后，就可以开始构建hexo blog了。</p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>在源码目录下，命令行运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init youbsitename</div></pre></td></tr></table></figure>
<p>就可以创建名为 <strong>youbsitename</strong> 的站点目录了。此过程会clone一些项目到本地站点目录，过程如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">INFO  Cloning hexo-starter to D:\Temp\test</div><div class="line">Cloning into &apos;D:\Temp\test&apos;...</div><div class="line">remote: Counting objects: 53, done.</div><div class="line">remote: Total 53 (delta 0), reused 0 (delta 0), pack-reused 53</div><div class="line">Unpacking objects: 100% (53/53), done.</div><div class="line">Submodule &apos;themes/landscape&apos; (https://github.com/hexojs/hexo-theme-landscape.git) registered for path &apos;themes/landscape&apos;</div><div class="line">Cloning into &apos;D:/Temp/test/themes/landscape&apos;...</div><div class="line">remote: Counting objects: 764, done.</div><div class="line">remote: Compressing objects: 100% (3/3), done.</div><div class="line">remote: Total 764 (delta 0), reused 0 (delta 0), pack-reused 761</div><div class="line">Receiving objects: 100% (764/764), 2.53 MiB | 53.00 KiB/s, done.</div><div class="line">Resolving deltas: 100% (390/390), done.</div><div class="line">Submodule path &apos;themes/landscape&apos;: checked out &apos;decdc2d9956776cbe95420ae94bac87e22468d38&apos;</div><div class="line">INFO  Install dependencies</div><div class="line">npm WARN deprecated swig@1.4.2: This package is no longer maintained</div><div class="line">npm WARN deprecated minimatch@0.3.0: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue</div><div class="line">npm WARN prefer global marked@0.3.6 should be installed with -g</div><div class="line">&gt; dtrace-provider@0.8.0 install D:\Temp\test\node_modules\dtrace-provider</div><div class="line">&gt; node scripts/install.js</div><div class="line">&gt; hexo-util@0.6.0 postinstall D:\Temp\test\node_modules\hexo-util</div><div class="line">&gt; npm run build:highlight</div><div class="line">&gt; hexo-util@0.6.0 build:highlight D:\Temp\test\node_modules\hexo-util</div><div class="line">&gt; node scripts/build_highlight_alias.js &gt; highlight_alias.json</div></pre></td></tr></table></figure>
<p>然后，进入blog目录，就可以对blog进行操作了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd yousitename &amp;&amp; dir</div></pre></td></tr></table></figure>
<p>blog 目录结构如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">yousitename</div><div class="line">├─package.json      项目package</div><div class="line">├─_config.yml       站点配置文件</div><div class="line">├─public            发布文件夹</div><div class="line">├─scaffolds         模版文件夹</div><div class="line">├─source            原始文件，通过&quot;hexo g&quot;将本目录下的文件生成为html等到public文件夹</div><div class="line">├─themes            主题文件夹</div><div class="line">├─...</div><div class="line">└─...</div></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>根目录下的站点配置文件 _config.yml 中的内容是对项目的一些配置，例如</p>
<ul>
<li>网站信息：作者、名称、描述等</li>
<li>网站结构</li>
<li>发布方式：支持发布到git(需要插件<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a>支持)</li>
</ul>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>修改站点配置文件 _config.yml 中的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next(你想要的主题，主题需要放在站点目录下的themes目录下)</div></pre></td></tr></table></figure></p>
<p>官网有提供<a href="https://hexo.io" target="_blank" rel="external">主题列表</a>可以选择，当然你也可以做自己的主题</p>
<p>另外，主题也有自己的主题配置文件 _config.yml，存放主题自己的一些配置。主题配置文件位置在主题目录下。</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>同样，hexo提供了插件功能，可以提供很多生成、发布和运行等的功能。<br>例如可以生成静态网站后，通过插件<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a>将生成的内容发布到git.<br>利用这个插件搭配<a href="https://pages.github.com/" target="_blank" rel="external">github.io</a>,可以实现自动生成&amp;部署自己的网站。</p>
<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<p>Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。<br>如果不想文章被布局处理，可以将 Front-Matter 中的layout: 设为 false 。</p>
<table>
<thead>
<tr>
<th>布局</th>
<th style="text-align:center">路径</th>
</tr>
</thead>
<tbody>
<tr>
<td>post</td>
<td style="text-align:center">source/_posts</td>
</tr>
<tr>
<td>page</td>
<td style="text-align:center">source</td>
</tr>
<tr>
<td>draft</td>
<td style="text-align:center">source/_drafts</td>
</tr>
</tbody>
</table>
<blockquote class="blockquote-center"><p>更多的写作可以参考<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">官网</a>.</p>
<p>建议创建页面 : tags 和categories 页面,生成的时候可以自动生成<a href="(http://localhost:4000/categories/">分类</a>)和<a href="http://localhost:4000/tags/" target="_blank" rel="external">标签</a>页面的内容。</p>
</blockquote> 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo new page tags</div><div class="line">hexo new page categories</div></pre></td></tr></table></figure>
<h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure>
<p>默认将静态网站生成到 public 目录下，生成完成后就可以将 public 目录下的内容发布到静态网站服务器上。</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>可以使用 hexo server 命令，本地启动服务器，运行网站</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>默认启动端口为 4000 的服务端，可以使用 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000</a> 访问。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="代码托管"><a href="#代码托管" class="headerlink" title="代码托管"></a>代码托管</h3><p>将创建的网站仓库托管到github，注册等过程不表。</p>
<p>配置自己的<a href="https://github.com/dp9u0/HexoBlog" target="_blank" rel="external">网站仓库</a>，然后就可以git commit &amp; git push ,将源码推送到github上。这样就可以随时编辑自己的网站了。</p>
<p>不必要的内容不需要提交，可以使用  .gitignore， 贴一下自己的 .gitignore 文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"># Logs</div><div class="line">logs</div><div class="line">*.log</div><div class="line">npm-debug.log*</div><div class="line"></div><div class="line"># Runtime data</div><div class="line">pids</div><div class="line">*.pid</div><div class="line">*.seed</div><div class="line"></div><div class="line"># Directory for instrumented libs generated by jscoverage/JSCover</div><div class="line">lib-cov</div><div class="line"></div><div class="line"># Coverage directory used by tools like istanbul</div><div class="line">coverage</div><div class="line"></div><div class="line"># nyc test coverage</div><div class="line">.nyc_output</div><div class="line"></div><div class="line"># Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)</div><div class="line">.grunt</div><div class="line"></div><div class="line"># node-waf configuration</div><div class="line">.lock-wscript</div><div class="line"></div><div class="line"># Compiled binary addons (http://nodejs.org/api/addons.html)</div><div class="line">build/Release</div><div class="line"></div><div class="line"># Dependency directories</div><div class="line">node_modules</div><div class="line">jspm_packages</div><div class="line"></div><div class="line"># Optional npm cache directory</div><div class="line">.npm</div><div class="line"></div><div class="line"># Optional REPL history</div><div class="line">.node_repl_history</div><div class="line"></div><div class="line">.DS_Store</div><div class="line">Thumbs.db</div><div class="line">db.json</div><div class="line">*.log</div><div class="line">public/</div><div class="line">.deploy*/</div></pre></td></tr></table></figure>
<h3 id="自动部署云服务器"><a href="#自动部署云服务器" class="headerlink" title="自动部署云服务器"></a>自动部署云服务器</h3><p>在云服务器(ubuntu 16.04)上安装 nodejs 、git 、hexo-cli</p>
<p>然后clone 到仓库本地：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~ </div><div class="line">git clone https://github.com/dp9u0/HexoBlog</div></pre></td></tr></table></figure>
<p>创建周期执行的呼叫脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi CallHexoBlogAutoUpdate.sh</div></pre></td></tr></table></figure>
<p>CallHexoBlogAutoUpdate.sh脚本中，添加以下内容，呼叫仓库中的自动更新脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">. ~/HexoBlog/AutoUpdate.sh</div></pre></td></tr></table></figure>
<blockquote class="blockquote-center"><p>为什么要有两个脚本: CallHexoBlogAutoUpdate.sh  和 AutoUpdate.sh?<br>不知道怎么给 AutoUpdate.sh 添加权限 ，不同的操作系统clone后，权限依旧保留。<br>同时 . ~/HexoBlog/AutoUpdate.sh 如果直接配置在 crontab 环境变量好像有点问题。<br>因此将所以自动更新的逻辑放在 AutoUpdate.sh 并且在每个需要执行自动更新的机器上添加外壳程序 CallHexoBlogAutoUpdate.sh  用点符号执行脚本 AutoUpdate.sh。<br>并且外壳程序添加到定时任务中。</p>
</blockquote>
<p>调用的自动更新脚本（该脚本加入到git仓库中，可以自更新）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">LOG_FILE=~/HexoBlogAutoUpdate.log</div><div class="line">echo &quot;========================================&quot; &gt;&gt; $LOG_FILE</div><div class="line">echo $(date +%y_%m_%d_%H_%I_%T) &gt;&gt; $LOG_FILE</div><div class="line">echo &quot;----------------------------------------&quot; &gt;&gt; $LOG_FILE</div><div class="line">if [ $1 ] ; then        </div><div class="line">    echo &quot;first argument is not empty : $1&quot; &gt;&gt; $LOG_FILE</div><div class="line">    TAR_DIR=$1 </div><div class="line">    echo &quot;use first argument as target dir : $TAR_DIR&quot; &gt;&gt; $LOG_FILE</div><div class="line">else</div><div class="line">    echo &quot;first argument is empty&quot; &gt;&gt; $LOG_FILE  </div><div class="line">    # use  ~/HexoBlog as the default dir    </div><div class="line">    TAR_DIR=~/HexoBlog # 修改为你需要的默认路径</div><div class="line">    echo &quot;use default dir as target dir : $TAR_DIR&quot; &gt;&gt; $LOG_FILE</div><div class="line">fi </div><div class="line">echo &quot;----------------------------------------&quot; &gt;&gt; $LOG_FILE</div><div class="line">if [ -d $TAR_DIR ] ; then </div><div class="line">    echo &quot;$TAR_DIR is a dir,try update&quot; &gt;&gt; $LOG_FILE</div><div class="line">    cd $TAR_DIR</div><div class="line">    echo &quot;++++++++++++++++++++++++++++++++++++++++&quot; &gt;&gt; $LOG_FILE</div><div class="line">    git pull &gt;&gt; $LOG_FILE # 同步git</div><div class="line">    echo &quot;++++++++++++++++++++++++++++++++++++++++&quot; &gt;&gt; $LOG_FILE</div><div class="line">    killall hexo &gt;&gt; $LOG_FILE # 关闭 hexo server</div><div class="line">    echo &quot;++++++++++++++++++++++++++++++++++++++++&quot; &gt;&gt; $LOG_FILE</div><div class="line">    hexo clean &gt;&gt; $LOG_FILE # 清理 </div><div class="line">    echo &quot;++++++++++++++++++++++++++++++++++++++++&quot; &gt;&gt; $LOG_FILE</div><div class="line">    hexo g &gt;&gt; $LOG_FILE # 生成</div><div class="line">    echo &quot;++++++++++++++++++++++++++++++++++++++++&quot; &gt;&gt; $LOG_FILE</div><div class="line">    hexo server &amp;  # 启动 hexo server</div><div class="line">    echo &quot;++++++++++++++++++++++++++++++++++++++++&quot; &gt;&gt; $LOG_FILE</div><div class="line">    hexo d &gt;&gt; $LOG_FILE   # 自动 </div><div class="line">    echo &quot;++++++++++++++++++++++++++++++++++++++++&quot; &gt;&gt; $LOG_FILE</div><div class="line">else</div><div class="line">    echo &quot;$TAR_DIR is not a dir,do nothing&quot; &gt;&gt; $LOG_FILE</div><div class="line">fi</div><div class="line">echo &quot;----------------------------------------&quot; &gt;&gt; $LOG_FILE</div><div class="line">echo $(date +%y_%m_%d_%H_%I_%T) &gt;&gt; $LOG_FILE</div><div class="line">echo &quot;========================================&quot; &gt;&gt; $LOG_FILE</div></pre></td></tr></table></figure>
<p>添加 CallHexoBlogAutoUpdate 脚本执行权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x CallHexoBlogAutoUpdate.sh</div></pre></td></tr></table></figure>
<p>添加定时任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab -e</div></pre></td></tr></table></figure>
<p>添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*/5 * * * *  ~/CallHexoBlogAutoUpdate.sh # 五分钟执行检查一次更新</div></pre></td></tr></table></figure>
<h3 id="github-io"><a href="#github-io" class="headerlink" title="github.io"></a>github.io</h3><p>hexo deploy 命令根据站点配置文件_config.yml中的配置，将生成的内容发布到站点中。</p>
<p>其中不同的type需要特殊的插件支持。<br>例如发布到git上，需要插件<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a></p>
<p>首先创建自己的<a href="https://github.com/dp9u0/dp9u0.github.io" target="_blank" rel="external">github.io仓库</a></p>
<blockquote class="blockquote-center"><p>关于github.io:如果建立了 用户名.github.io 的仓库，github会定时将这个仓库的静态页面发布到 用户名.github.io 的站点上.<br>可以了解更多关于 <a href="github.io">github.io</a>的内容</p>
</blockquote> 
<p>站点配置文件配置参考如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:dp9u0/dp9u0.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<blockquote class="blockquote-center"><p>部署到git，需要有你的github仓库的push权限，可以参考<a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="external">github文档</a>中关于<a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="external">生成 SSH Key</a><br>以及<a href="https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/" target="_blank" rel="external">添加SSH Key</a>的部分，配置通过SSH免密码push代码到github。</p>
</blockquote> 
<p>然后，就可以运行生成部署命令了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>这些也可以添加到AutoUpdate.sh脚本中，这样我只需要在自己的个人电脑上hexo new ,编辑自己的网站，然后git commit 提交，再执行git push到推送到 将源码推送到github上。这样就可以随时编辑自己的网站了。<br>部署在云服务器上的<a href="http://baochen.name:4000">网站</a> 和<a href="https://dp9u0.github.io" target="_blank" rel="external">github.io</a> 上的内容，都会自动更新了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;正在学习前端知识，发现了一个很好玩的基于 Node.js的高效的静态站点生成框架&lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;Hexo&lt;/a&gt;,使用 Markdown 编写文章,于是用来搭建自己的blog。&lt;br&gt;第一篇就用来介绍如何一步一步完成搭建的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="knowledge" scheme="http://baochen.name:4000/categories/knowledge/"/>
    
    
      <category term="hexo" scheme="http://baochen.name:4000/tags/hexo/"/>
    
  </entry>
  
</feed>
